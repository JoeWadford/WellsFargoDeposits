remainder(5)
remainder(11,5)
remainder(divisor = 11, num = 5)
remainder(4, div = 2)
args(remainder)
submit()
evaluate(sd, c(1.4, 3.6, 7.9, 8.8))
evaluate(function(x){x+1},6)
evaluate(function(i:n){i}, c(8,4,0))
evaluate(function(vector){[1]}, c(8,4,0))
evaluate(function(vector){1}, c(8,4,0))
evaluate(function(x){[x]}, c(8,4,0))
evaluate(function(vector(x)){x}, c(8,4,0))
evaluate(function(vector[x]), C(8,4,0))
evaluate(function(x)[x], c(8,4,0))
evaluate(function(x){x}, C(8,4,0)
evaluate(function(vector){x}, c(8,4,0))
evaluate(function(vector){[x]}, C(8,4,0))
info()
evaluate(function[x], c(8,4,0))
evaluate(c(8,4,0), [x])
evaluate([x], c(8,4,0))
evaluate(c(8,4,0){x}, 1)
evaluate(function(vector=c(8,4,0)){x},1)
evaluate(function(x){c(8,4,0), [x]},1)
evaluate(function(x){c(8,4,0) [x]},1)
evaluate(function(x){c(8,4,0)[x]}, 1)
evaluate(function(x){[x]c(8,4,0)}, 1)
evaluate(function(x){(8,4,0)[x]},1)
evaluate(function(x){c(8,4,0)[x]},1)
hint
hint()
evaluate([x]{c(8,4,0)},1)
evaluate(c(8,4,0){[x]},1)
evaluate(function(x){[x]}, c(8,4,0)[1])
evaluate(function(x){x[1]}, c(8,4,0))
evaluate(function(x){x[-1]}, c(8,4,0))
?paste
paste("Programming", "is", "fun!")
submit()
submit()
telegram("I", "want", "to", "work", "hard", "and", "get", 'a', 'good', 'paying', 'job', 'in', 'infosec')
submit()
submit()
mad_libs(place = "NC", adjective = "angry", noun = "president")
submit()
"I" %p% "love" %p% "R!"
makeCacheMatrix <- function(x = matrix()) {
m <- NULL
set <- function (y) {
x <<- y
m <<- NULL
}
get <- function () {
x
}
setinverse <- function (BOOM) m <<- BOOM
getinverse <- function () m
list(set = set, get = get, setinverse = setinverse, getinverse = getinverse)
}
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
m <- x$getinverse()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
m <- x$get()
m <- solve(m)
x$setinverse(m)
m
}
B <- matrix(c(1,2,3,4)2,2)
B <- matrix(c(1,2,3,4), 2, 2)
B1 <- makeCacheMatrix(B)
cacheSolve(B1)
set.seed(1)
set.seed(1)
rpois(5,2)
rpois(5,2)
rpois(5,2)
set.seed(1)
rpois(5,2)
set.seed(10)
x <- rep(0:1, each = 5)
e <- rnorm(10, 0, 20)
y <- 0.5 + 2 * x + e
x
swirl()
library("swirl")
swirl()
arrange(cran2, country, desc(r_version), ip_id)
cran3 <- select(cran, ip_id, package, size)
cran3
mutate(cran3, size_mb = size / 2^20)
mutate(cran3, size_mb = size / 2^20, size_gb = size_mb / 2^10)
mutate(cran3, correct_size = size + 1000)
summarize(cran, avg_bytes = mean(size))
summarize(cran, size)
swirl()
swirl()
library("swirl")
submit()
swirl()
cran
?select
select(cran, ip_id, package, country)
5:20
swirl()
library(dplyr)
mydf <- tbl_df(cran)
cran <- tbl_df(mydf)
rm("mydf")
cran
?group_by
by_package <- group_by(cran, package)
by_package
summarize(bypackage, mean(size))
summarize(by_package, size)
summarize(by_package)
summarize(by_package, mean(size))
submit()
pack_sum
quantile(pack_sum$count, probs = 0.99)
top_counts <- filter(pack_sum, count > 679)
top_counts
view(top_counts)
View(top_counts)
top_counts_sorted <- arrange(top_counts, desc(count))
View(top_counts_sorted)
quantile(pack_sum$unique, probs = 0.99)
top_unique <- filter(pack_sum, unique > 465)
View(top_unique)
top_unique_sorted <- arrange(top_unique, desc(unique))
View(top_unique_sorted)
submit()
submit()
submit()
View(result3)
submit()
submit()
submit()
submit()
submit()
swirl()
swirl()
library("swirl")
swirl()
mydf <- read.csv(path2csv, stringsAsFactors = FALSE)
dim(mydf)
head(mydf)
library(dplyr)
packageVersion("dplyr")
cran <- tbl_df(mydf)
rm("mydf")
cran
?select
select(cran, ip_id, package, country)
5:20
select(cran, r_arch:country)
select(cran, country:r_arch)
cran
select(cran, -time)
select(cran, -(x:size))
-5:20
-(5:20)
select(cran, -(x:size))
select(cran,  -(X:size))
filter(cran, package == "swirl")
filter(cran, r_version == "3.1.1", country == "US")
?Comparison
filter(cran, country == "IN", r_version >= "3.0.2")
filter(cran, country == "IN", r_version <= "3.0.2")
filter(cran, country == "US" | country == "IN")
filter(cran, size > 100500, r_os == "linux-gnu")
is.na(c(3, 5, NA, 10))
!is.na(c(3, 5, NA, 10))
filter(cran, !is.na(R.version))
filter(cran, r_version!is.na())
filter(cran, !is.na(r_version))
cran2 <- select(cran, size:ip_id)
arrange(cran2, ip_id)
arrange(cran2, desc(ip_id))
arrange(cran2, package, ip_id)
arrange(cran2, country, desc(r_version), ip_id)
cran3 <- select(cran, ip_id, package, size)
cran3
mutate(cran3, size_mb = size / 2^20)
mutate(cran3, size_mb = size / 2^20, size_gb = size_mb / 2^10)
mutate(cran3, correct_size = size + 1000)
summarize(cran, avg_bytes = mean(size))
library(swirl)
swirl()
library(tidyr)
studnets
students
?gather
gather(students, sex, count, -grade)
students2
gather(students2, sex_class, count)
res <- gather(students2, sex_class, count, - grade)
res
?separate()
?separate
separate(res, sex_class, c("sex, "class""))
separate(res, sex_class, c("sex", "class"))
submit()
submit()
students3
submit()
?spread
View(passed)
submit()
submit()
submit()
submit()
submit()
submit()
submit()
submit()
submit()
library(readr)
parse_number("class5")
submit()
submit()
submit()
submit()
students4
submit()
submit()
submit()
submit()
submit()
submit()
submit()
submit()
passed
failed
mutate(passed, status = "passed")
passed <- passed %>% mutate(status = "passed")
failed <- failed %>% mutate(status = "failed")
bind_rows(passed, failed)
sat
View(res)
submit()
submit()
submit()
submit()
submit()
submit()
submit()
submit()
duplicated(NC2$'Bank Deposits')
NC <- read.csv("./North_Carolina_Wells_Fargo_Bank_Deposits.csv")
SC <- read.csv("./South_Carolina_Wells_Fargo_Bank_Deposits.csv")
GA <- read.csv("./Georgia_Wells_Fargo__Bank_Deposits.csv")
MS <- read.csv("./Mississippi_Wells_Fargo__Bank_Deposits.csv")
FL <- read.csv("./Florida_Wells_Fargo__Bank_Deposits.csv")
MD <- read.csv("./Maryland_Wells_Fargo__Bank_Deposits.csv")
TN <- read.csv("./Tennessee_Wells_Fargo_Bank_Deposits.csv")
VA <- read.csv("./Virginia_Wells_Fargo_Bank_Deposits.csv")
AL <- read.csv("./Alabama_Wells_Fargo_Bank_Deposits.csv")
### Adding state column for analysis in Tableau
NC$State <- 'North Carolina'
SC$State <- 'South Carolina'
GA$State <- 'Georgia'
MS$State <- 'Mississippi'
FL$State <- 'Florida'
MD$State <- 'Maryland'
TN$State <- 'Tennessee'
VA$State <- 'Virginia'
AL$State <- 'Alabama'
### Changing column names into more manageable names
#### Checking columnn names at first then renaming then checking work
colnames(NC)
colnames(NC)[2:3] <- c("Bank Deposits 2015","Bank Deposits 2014")
colnames(NC)
colnames(SC)
colnames(SC)[2:3] <- c("Bank Deposits 2015","Bank Deposits 2014")
colnames(SC)
colnames(GA)
colnames(GA)[2:3] <- c("Bank Deposits 2015", "Bank Deposits 2014")
colnames(GA)
colnames(MS)
colnames(MS)[2:3] <- c("Bank Deposits 2015", "Bank Deposits 2014")
colnames(MS)
colnames(FL)
colnames(FL)[2:3] <- c("Bank Deposits 2015", "Bank Deposits 2014")
colnames(FL)
colnames(MD)
colnames(MD)[2:3] <- c("Bank Deposits 2015", "Bank Deposits 2014")
colnames(MD)
colnames(TN)
colnames(TN)[2:3] <- c("Bank Deposits 2015", "Bank Deposits 2014")
colnames(TN)
colnames(VA)
colnames(VA)[2:3] <- c("Bank Deposits 2015", "Bank Deposits 2014")
colnames(VA)
colnames(AL)
colnames(AL)[2:3] <- c("Bank Deposits 2015", "Bank Deposits 2014")
colnames(AL)
### tidying data into a narrow dataset
#### NC, SC, GA, MS, FL, MD, TN, VA, AL
#### 7 Columns =  AL, FL, GA, MD,
NC <- NC
SC <- SC
GA <- GA[,-c(4:6)]
MS <- MS
FL <- FL[,-c(4:6)]
MD <- MD[,-c(4:6)]
TN <- TN
VA <- VA
AL <- AL[,-c(4:6)]
#### adding year
#### NC, SC, GA, MS, FL, MD, TN, VA, AL
NC1 <- NC[,c(1,2,4)]
SC1 <- SC[,c(1,2,4)]
GA1 <- GA[,c(1,2,4)]
MS1 <- MS[,c(1,2,4)]
FL1 <- FL[,c(1,2,4)]
MD1 <- MD[,c(1,2,4)]
TN1 <- TN[,c(1,2,4)]
VA1 <- VA[,c(1,2,4)]
AL1 <- AL[,c(1,2,4)]
NC2 <- NC[,c(1,3,4)]
SC2 <- SC[,c(1,3,4)]
GA2 <- GA[,c(1,3,4)]
MS2 <- MS[,c(1,3,4)]
FL2 <- FL[,c(1,3,4)]
MD2 <- MD[,c(1,3,4)]
TN2 <- TN[,c(1,3,4)]
VA2 <- VA[,c(1,3,4)]
AL2 <- AL[,c(1,3,4)]
NC1$Year <- 2015
SC1$Year <- 2015
GA1$Year <- 2015
MS1$Year <- 2015
FL1$Year <- 2015
MD1$Year <- 2015
TN1$Year <- 2015
VA1$Year <- 2015
AL1$Year <- 2015
NC2$Year <- 2014
SC2$Year <- 2014
GA2$Year <- 2014
MS2$Year <- 2014
FL2$Year <- 2014
MD2$Year <- 2014
TN2$Year <- 2014
VA2$Year <- 2014
AL2$Year <- 2014
#### NC, SC, GA, MS, FL, MD, TN, VA, AL
colnames(NC1)[2] <- "Bank Deposits"
colnames(SC1)[2] <- "Bank Deposits"
colnames(GA1)[2] <- "Bank Deposits"
colnames(MS1)[2] <- "Bank Deposits"
colnames(FL1)[2] <- "Bank Deposits"
colnames(MD1)[2] <- "Bank Deposits"
colnames(TN1)[2] <- "Bank Deposits"
colnames(VA1)[2] <- "Bank Deposits"
colnames(AL1)[2] <- "Bank Deposits"
colnames(NC2)[2] <- "Bank Deposits"
colnames(SC2)[2] <- "Bank Deposits"
colnames(GA2)[2] <- "Bank Deposits"
colnames(MS2)[2] <- "Bank Deposits"
colnames(FL2)[2] <- "Bank Deposits"
colnames(MD2)[2] <- "Bank Deposits"
colnames(TN2)[2] <- "Bank Deposits"
colnames(VA2)[2] <- "Bank Deposits"
colnames(AL2)[2] <- "Bank Deposits"
### Importing datasets from datazar into R
getwd()
setwd('C:\Users\joewa\OneDrive\Documents\Quant Boot Camp\Tableaus\Wells Fargo Deposits')
setwd('C:/Users/joewa/OneDrive/Documents/Quant Boot Camp/Tableaus/Wells Fargo Deposits')
getwd()
NC <- read.csv("./North_Carolina_Wells_Fargo_Bank_Deposits.csv")
SC <- read.csv("./South_Carolina_Wells_Fargo_Bank_Deposits.csv")
GA <- read.csv("./Georgia_Wells_Fargo__Bank_Deposits.csv")
MS <- read.csv("./Mississippi_Wells_Fargo__Bank_Deposits.csv")
FL <- read.csv("./Florida_Wells_Fargo__Bank_Deposits.csv")
MD <- read.csv("./Maryland_Wells_Fargo__Bank_Deposits.csv")
TN <- read.csv("./Tennessee_Wells_Fargo_Bank_Deposits.csv")
VA <- read.csv("./Virginia_Wells_Fargo_Bank_Deposits.csv")
AL <- read.csv("./Alabama_Wells_Fargo_Bank_Deposits.csv")
### Adding state column for analysis in Tableau
NC$State <- 'North Carolina'
SC$State <- 'South Carolina'
GA$State <- 'Georgia'
MS$State <- 'Mississippi'
FL$State <- 'Florida'
MD$State <- 'Maryland'
TN$State <- 'Tennessee'
VA$State <- 'Virginia'
AL$State <- 'Alabama'
### Changing column names into more manageable names
#### Checking columnn names at first then renaming then checking work
colnames(NC)
colnames(NC)[2:3] <- c("Bank Deposits 2015","Bank Deposits 2014")
colnames(NC)
colnames(SC)
colnames(SC)[2:3] <- c("Bank Deposits 2015","Bank Deposits 2014")
colnames(SC)
colnames(GA)
colnames(GA)[2:3] <- c("Bank Deposits 2015", "Bank Deposits 2014")
colnames(GA)
colnames(MS)
colnames(MS)[2:3] <- c("Bank Deposits 2015", "Bank Deposits 2014")
colnames(MS)
colnames(FL)
colnames(FL)[2:3] <- c("Bank Deposits 2015", "Bank Deposits 2014")
colnames(FL)
colnames(MD)
colnames(MD)[2:3] <- c("Bank Deposits 2015", "Bank Deposits 2014")
colnames(MD)
colnames(TN)
colnames(TN)[2:3] <- c("Bank Deposits 2015", "Bank Deposits 2014")
colnames(TN)
colnames(VA)
colnames(VA)[2:3] <- c("Bank Deposits 2015", "Bank Deposits 2014")
colnames(VA)
colnames(AL)
colnames(AL)[2:3] <- c("Bank Deposits 2015", "Bank Deposits 2014")
colnames(AL)
### tidying data into a narrow dataset
#### NC, SC, GA, MS, FL, MD, TN, VA, AL
#### 7 Columns =  AL, FL, GA, MD,
NC <- NC
SC <- SC
GA <- GA[,-c(4:6)]
MS <- MS
FL <- FL[,-c(4:6)]
MD <- MD[,-c(4:6)]
TN <- TN
VA <- VA
AL <- AL[,-c(4:6)]
#### adding year
#### NC, SC, GA, MS, FL, MD, TN, VA, AL
NC1 <- NC[,c(1,2,4)]
SC1 <- SC[,c(1,2,4)]
GA1 <- GA[,c(1,2,4)]
MS1 <- MS[,c(1,2,4)]
FL1 <- FL[,c(1,2,4)]
MD1 <- MD[,c(1,2,4)]
TN1 <- TN[,c(1,2,4)]
VA1 <- VA[,c(1,2,4)]
AL1 <- AL[,c(1,2,4)]
NC2 <- NC[,c(1,3,4)]
SC2 <- SC[,c(1,3,4)]
GA2 <- GA[,c(1,3,4)]
MS2 <- MS[,c(1,3,4)]
FL2 <- FL[,c(1,3,4)]
MD2 <- MD[,c(1,3,4)]
TN2 <- TN[,c(1,3,4)]
VA2 <- VA[,c(1,3,4)]
AL2 <- AL[,c(1,3,4)]
NC1$Year <- 2015
SC1$Year <- 2015
GA1$Year <- 2015
MS1$Year <- 2015
FL1$Year <- 2015
MD1$Year <- 2015
TN1$Year <- 2015
VA1$Year <- 2015
AL1$Year <- 2015
NC2$Year <- 2014
SC2$Year <- 2014
GA2$Year <- 2014
MS2$Year <- 2014
FL2$Year <- 2014
MD2$Year <- 2014
TN2$Year <- 2014
VA2$Year <- 2014
AL2$Year <- 2014
#### NC, SC, GA, MS, FL, MD, TN, VA, AL
colnames(NC1)[2] <- "Bank Deposits"
colnames(SC1)[2] <- "Bank Deposits"
colnames(GA1)[2] <- "Bank Deposits"
colnames(MS1)[2] <- "Bank Deposits"
colnames(FL1)[2] <- "Bank Deposits"
colnames(MD1)[2] <- "Bank Deposits"
colnames(TN1)[2] <- "Bank Deposits"
colnames(VA1)[2] <- "Bank Deposits"
colnames(AL1)[2] <- "Bank Deposits"
colnames(NC2)[2] <- "Bank Deposits"
colnames(SC2)[2] <- "Bank Deposits"
colnames(GA2)[2] <- "Bank Deposits"
colnames(MS2)[2] <- "Bank Deposits"
colnames(FL2)[2] <- "Bank Deposits"
colnames(MD2)[2] <- "Bank Deposits"
colnames(TN2)[2] <- "Bank Deposits"
colnames(VA2)[2] <- "Bank Deposits"
colnames(AL2)[2] <- "Bank Deposits"
duplicated(NC2$'Bank Deposits')
SoutheastDeposits <- do.call("rbind", list(NC1,SC1,GA1,MS1,FL1,MD1,TN1,VA1,AL1,NC2,SC2,GA2,MS2,FL2,MD2,TN2,VA2,AL2))
SoutheastDeposits <- na.omit(SoutheastDeposits)
SoutheastDeposits[duplicated(SoutheastDeposits$'Bank Deposits')]
View(SoutheastDeposits)
SoutheastDeposits[duplicated(SoutheastDeposits$'County')]
SoutheastDeposits[duplicated(SoutheastDeposits$County)]
colnames(SoutheastDeposits)
duplicated(SoutheastDeposits$County)
unique(SoutheastDeposits$County)
unique(!SoutheastDeposits$County)
!unique(SoutheastDeposits$County)
Duplicates <- !unique(SoutheastDeposits$County)
CountyFreq <- data.frame(table(SoutheastDeposits$County))
CountyFreq[CountyFreq$Freq>1,]
CountyFreq[CountyFreq$Freq>2,]
write.csv(DupCountys, file='DupCountys.csv')
DupCountys <- CountyFreq[CountyFreq$Freq>2,]
write.csv(DupCountys, file='DupCountys.csv')
write.csv(SoutheastDeposits, file = "SoutheastDeposits.csv")
